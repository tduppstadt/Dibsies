</br>

<!-- Dupp start -->
<style>
    #myPreview {
        width: 400px;
        height: 300px;
        background-color: red;
    }
</style>


<!-- Dupp start -->
<script type="text/javascript" src='{{'customized-preview-mike.js'|asset_url }}'></script>
<!-- Dupp end -->

<div class="tags contentsection">
    <span style="font:normal 16px/28px 'Trocchi', sans-serif;color:#2957A4"><b>DIBSIES Personalization Options</b></span>
    <b> <font color="#2957A4">&nbsp; &nbsp; (Free!)</font></b>
    <br/>
    <div class="personalize">      
        <input class="js-personalize-btn personalize__btn button large plus" value="Personalize Now" type="button">
    </div>
    <hr style="clear: both;">
</div>

{% assign option_mt_index = 0 %}
{% assign option_number_names_index = 0 %}
{% if product.metafields.PZKeys.is_monogram == 1%}
  {% assign monogram_type = 'Type of Monogram' %}
  {% assign number_names = 'Choose Number of Names' %}
  {% for option in product.options %}
    {% if option == monogram_type %}
        {% assign option_mt_index = forloop.index0 %}
        {% assign option_number_names_index = forloop.index0 %}
    {% endif %}
  {% endfor %}
{% endif %}

<script type="text/javascript">

    // (c) Copyright 2011 Caroline Schnapp. All Rights Reserved. Contact: mllegeorgesand@gmail.com
    // See http://wiki.shopify.com/Linked_Options
    window.Shopify = Shopify || {};

    Shopify.optionsMap = {};

    Shopify.updateOptionsInSelector = function(selectorIndex) {

        switch (selectorIndex) {
            case 0:
                var key = 'root';
                var selector = jQuery('.single-option-selector:eq(0)');
                break;
            case 1:
                var key = jQuery('.single-option-selector:eq(0)').val();
                var selector = jQuery('.single-option-selector:eq(1)');
                break;
            case 2:
                var key = jQuery('.single-option-selector:eq(0)').val();
                key += ' / ' + jQuery('.single-option-selector:eq(1)').val();
                var selector = jQuery('.single-option-selector:eq(2)');
        }

        var initialValue = selector.val();
        selector.empty();
        var availableOptions = Shopify.optionsMap[key];
        if (typeof(availableOptions) != 'undefined') {
            for (var i = 0; i < availableOptions.length; i++) {
                var option = availableOptions[i];
                var newOption = jQuery('<option></option>').val(option).html(option);
                selector.append(newOption);
            }
            if (jQuery.inArray(initialValue, availableOptions) !== -1) {
                selector.val(initialValue);
            }
            selector.trigger('change');
        }
    };

    Shopify.linkOptionSelectors = function(product) {
        // Building our mapping object.
        for (var i = 0; i < product.variants.length; i++) {
            var variant = product.variants[i];
            if (variant.available) {
                // Gathering values for the 1st drop-down.
                Shopify.optionsMap['root'] = Shopify.optionsMap['root'] || [];
                Shopify.optionsMap['root'].push(variant.option1);
                Shopify.optionsMap['root'] = Shopify.uniq(Shopify.optionsMap['root']);
                // Gathering values for the 2nd drop-down.
                if (product.options.length > 1) {
                    var key = variant.option1;
                    Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
                    Shopify.optionsMap[key].push(variant.option2);
                    Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
                }
                // Gathering values for the 3rd drop-down.
                if (product.options.length === 3) {
                    var key = variant.option1 + ' / ' + variant.option2;
                    Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
                    Shopify.optionsMap[key].push(variant.option3);
                    Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
                }
            }
        }
        // Update options right away.
        Shopify.updateOptionsInSelector(0);
        if (product.options.length > 1) Shopify.updateOptionsInSelector(1);
        if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
        // When there is an update in the first dropdown.
        jQuery(".single-option-selector:eq(0)").change(function() {
            Shopify.updateOptionsInSelector(1);
            if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
            return true;
        });
        // When there is an update in the second dropdown.
        jQuery(".single-option-selector:eq(1)").change(function() {
            if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
            return true;
        });

    };










window.LiquidJsProduct = function() {
    var variantsku;

    var selectCallback = function(variant, selector) {
        
        if (variant && variant.available == true) {

            // selected a valid variant
            $("input[type=submit]").show();
            var newHtml = '<font color="red" size="3">Sale Price:</font> ' + Shopify.formatMoney(variant.price, {{ shop.money | json }});
            if (variant.compare_at_price > variant.price) {
                newHtml += '<div class="was-price">' + 'Regular Price ' + Shopify.formatMoney(variant.compare_at_price, "{{shop.money}}") + '</div>';
            }
            $('#price-field').html(newHtml); // update price field
        } else {
            // variant doesn't exist
            $("input[type=submit]").hide();
            var message = variant ? {{ 'products.variant.out_of_stock' | t | json }} : {{ 'products.variant.non_existent' | t | json }};
            $('#price-field').text("Currently Out of Stock"); // update price-field message
        }

        //Shopify variant linking
        if (variant && variant.featured_image) {
            $('.modal-product-preview .gallery a.thumb[href^="' + Shopify.Image.getSizedImageUrl(variant.featured_image.src, 'master').split('?')[0] + '"]').click();
        }

        variantsku = variant.sku;

        var optionMTValue = variant.options[{{ option_mt_index }}];
        //var optionMTValue = variant.options[0];
        

        // Begin Number of Initials Dynamic Form Code

        switch (optionMTValue) {
            case "1 Letter Monogram":
                $(".two-initial-monogram").css("display", "none");
                $(".three-initial-monogram").css("display", "none");
                $(".full-name-monogram").css("display", "none");
                $(".one-initial-monogram").css("display", "block");
                // clear out monogram fields 
                $(".customText").val("");
                $(".customName1").val("");
                $(".customName2").val("");
                $(".customName3").val("");
                $(".customName4").val("");
                $(".customName5").val("");
                $(".customName6").val("");
                $(".customName1").addClass("required");
                $(".customText").removeClass("required");
                $(".customName2").removeClass("required");
                $(".customName3").removeClass("required");
                break;
            case "2 Letter Monogram":
                $(".three-initial-monogram").css("display", "none");
                $(".one-initial-monogram").css("display", "none");
                $(".full-name-monogram").css("display", "none");
                $(".two-initial-monogram").css("display", "block");
                // clear out monogram fields 
                $(".customText").val("");
                $(".customName1").val("");
                $(".customName2").val("");
                $(".customName3").val("");
                $(".customName4").val("");
                $(".customName5").val("");
                $(".customName6").val("");
                $(".customName1").addClass("required");
                $(".customName2").addClass("required");
                $(".customText").removeClass("required");
                $(".customName3").removeClass("required");
                break;
            case "3 Letter Monogram":
                $(".two-initial-monogram").css("display", "none");
                $(".one-initial-monogram").css("display", "none");
                $(".full-name-monogram").css("display", "none");
                $(".three-initial-monogram").css("display", "block");

                // clear out monogram fields 
                $(".customText").val("");
                $(".customName1").val("");
                $(".customName2").val("");
                $(".customName3").val("");
                $(".customName4").val("");
                $(".customName5").val("");
                $(".customName6").val("");
                $(".customName1").addClass("required");
                $(".customName2").addClass("required");
                $(".customName3").addClass("required");
                $(".customText").removeClass("required");
                break;
            case "Full Name Monogram":
                $(".two-initial-monogram").css("display", "none");
                $(".one-initial-monogram").css("display", "none");
                $(".three-initial-monogram").css("display", "none");
                $(".full-name-monogram").css("display", "block");
                // clear out monogram fields 
                $(".customText").val("");
                $(".customName1").val("");
                $(".customName2").val("");
                $(".customName3").val("");
                $(".customName4").val("");
                $(".customName5").val("");
                $(".customName6").val("");
                $(".customText").addClass("required");
                $(".customName1").removeClass("required");
                $(".customName2").removeClass("required");
                $(".customName3").removeClass("required");

                break;

        }

        // End Number of Initials Dynamic Form Code  


        // Begin Number of Names Dynamic Form Code

        var optionNumberNamesValue = variant.options[{{ option_number_names_index }}];
        //var optionNumberNamesValue = variant.options[0];
        

        console.log("optionNumberNamesValue:" + optionNumberNamesValue);
        for (var i = 1; i < 30; i++) {

            if (i > optionNumberNamesValue) {

                $(".customName" + i).val("");
                $(".customName" + i).css("display", "none");
                $(".customName" + i).removeClass("required");
                $(".nameLabel" + i).css("display", "none");
            } else {
                //                                   $(".customName" + i).css("display", "block");
                //                                   $(".customName" + i).addClass("required");
                //                                   $(".nameLabel" + i).css("display", "block");
            }
        }
    };

    //Set up product inputs
   
    new Shopify.OptionSelectors("product-select", {
        product: {{ product | json }},
        onVariantSelected: selectCallback,
        enableHistoryState: true
    }); 

    {% if product.options.size > 1 %}
        Shopify.linkOptionSelectors({{ product | json }}); 
    {% endif %}

    //Hide original option label if we now have multiple options
    if ($('.selector-wrapper .single-option-selector').length != 1) {
        $('#product-select').siblings('label[for="product-select"]').hide();
    }

    //Style any added select dropdowns
    $.selectReplace();
    














    Shopify.money_format = '{{shop.money_format | replace: "'
    ", '"
    '}}';

    {% unless settings.prod_disable_ajax %}
    //Override for default Shopify function
    Shopify.onItemAdded = function(line_item) {
        //Make buttons usable again
        $('form input[type="submit"]').attr('disabled', false).removeClass('disabled');
        //Adding to cart successful, update cart
        Shopify.getCart();
        //Show 'item added'
        $('#purchase').siblings('.added').remove();
        $('<div>').addClass('added').html('<span class="yay">{{ settings.text_ty }}</span><a class="basket" href="/cart">{{ settings.text_cart }} &rarr;</a>')
            .insertBefore($('#purchase')).fadeIn(200).delay(5000).fadeOut(500, function() {
                $(this).remove();
            });
        return false;
    }

    //Override for default Shopify function
    Shopify.onError = function(XMLHttpRequest, textStatus) {
        //Make buttons usable again
        $('form input[type="submit"]').attr('disabled', false).removeClass('disabled');
        //Display error message
        var errmsg;
        var data = eval('(' + XMLHttpRequest.responseText + ')');
        if (!!data.message) {
            errmsg = data.message + '<br />' + data.description;
        }

        {
            errmsg = Shopify.fullMessagesFromErrors(data).join('; ');
        }
        $('#purchase').siblings('.added').remove();
        $('<div>').addClass('added').addClass('error').html('<span>' + errmsg + '</span>')
            .insertBefore($('#purchase')).fadeIn(200).delay(5000).fadeOut(500, function() {
                $(this).remove();
            });
    };

    //Override for default Shopify function
    Shopify.onCartUpdate = function(cart) {
        //Update elements on screen that show cart info
        $('#headercartvals').html('(' + cart.item_count + ') ' + Shopify.formatMoney(cart.total_price));
    }

    //Define the function that adds to the cart
    function window.addToCart(e) {
        if (typeof e !== 'undefined') e.preventDefault();
        Shopify.addItemFromForm($(this).closest('form').attr('id'));
    }

        //Action for clicking 'buy'
        $('#purchase').bind('click', addToCart);
    {% endunless %}

};
</script>
