      

<div id="crumbs" class="sixteen columns">
  <a href="/" title="{{ 'general.breadcrumbs.home' | t }}">{{ 'general.breadcrumbs.home' | t }}</a>
  &raquo;
  {% if collection %}
  {{ collection.title | link_to: collection.url }} &raquo;
  {% endif %}
  <a href="{{ product.url }}">{{ product.title }}</a>
</div>

{% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
<div id="productinfo" class="cf" data-producthandle="{{ product.handle }}" itemscope itemtype="http://schema.org/Product">
  
  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
  <meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'grande' }}" />
  {% for variant in product.variants %}
  <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
    <meta itemprop="price" content="{{ variant.price | money_without_currency | strip_html }}" />
    <meta itemprop="priceCurrency" content="{{ shop.currency }}" />
    {% if product.available %}
    <link itemprop="availability" href="http://schema.org/InStock" />
    {% else %}
    <link itemprop="availability" href="http://schema.org/OutOfStock" />
    {% endif %}  
  </div>
  {% endfor %}
  
  <div class="eight columns">
    
    <div class="gallery mode-{{ settings.prod_det_gall_method }}">
      <div class="main">
        <a class="image" href="{{ featured_image | img_url: 'master' }}" title="{{ featured_image.alt | escape }}">
          <img src="{{ featured_image | img_url: 'master' }}" alt="{{ featured_image.alt | escape }}" />
        </a>
      </div>
      {% if product.images.size > 1 %}
      <div class="thumbnails">
        {% for image in product.images %}
        <a class="thumb" {% if image.src == featured_image %} class="active" {% endif %} title="{{ image.alt | escape }}" href="{{ image | product_img_url: 'master' }}">
          <img src="{{ image | img_url: 'small' }}" alt="{{ image.alt | escape }}"/>
        </a>
        {% endfor %}
      </div>
      {% endif %}
    </div><!-- .product-photos -->
    
    <!-- under gallery -->
  </div>
  
  <div id="detail" class="seven columns offset-by-one">
     {% assign variant = product.selected_or_first_available_variant  %}
    <h1 itemprop="name">{{ product.title }}</h1>
    
    {% if settings.prod_show_vendor %}
    {% comment %}
    Do we have a collection that has the same name as our product vendor name?
    If we do, let's have the vendor link point to it.
    If not, we will point to the automatic vendor collection.
    {% endcomment %}
    {% assign product_vendor_handle = product.vendor | handle %}
    {% if collections[product_vendor_handle].handle == product_vendor_handle %}
    {% assign vendor_url = collections[product_vendor_handle].url %}
    {% else %}
    {% assign vendor_url = product.vendor | url_for_vendor %}
    {% endif %}
    {% capture brand %}<span itemprop="brand">{{ product.vendor | link_to: vendor_url }}</span>{% endcapture %}
    <p>{{ 'products.general.brand_html' | t: brand: brand }}</p>
    {% endif %}
    
    <div id="price-field" class="price">
      <span>{{ variant.price | money }}</span>
      {% if variant.compare_at_price > variant.price %}
      <div class="was-price">{{ 'products.general.was' | t }} {{ variant.compare_at_price | money }}</div>
      {% endif %}
    </div>
    
    {% if product.available %}
    <form action="/cart/add" method="post" id="product-form">
      <div class="options">
        
        <label for="quantity">{{ 'products.general.quantity' | t }}</label> 
        {% unless settings.hide_plusmin_prod %}<a href="javascript:modifyQuantity('#quantity', -1)" class="minibutton">-</a>{% endunless %}
        <input class="short" type="text" id="quantity" name="quantity" value="1" onfocus="this.select();" />
        {% unless settings.hide_plusmin_prod %}<a href="javascript:modifyQuantity('#quantity', 1)" class="minibutton">+</a>{% endunless %}
        
        {% if product.variants.size == 1 %}
        <input type="hidden" name="id" value="{{ product.variants.first.id }}" />
        {% if settings.prod_show_opts_single %}
          {% unless product.variants.first.title contains 'Default' %}
            <p>{{ product.options.first }}: {{ product.variants.first.title }}</p>
          {% endunless %}
        {% endif %}
        {% else %}
        <div class="selectors">
          <label for="product-select">{{ product.options.first }}:</label>
            <select id="product-select" name="id" class="noreplace">
            {% for variant in product.variants %}
            <option {% if variant.id == product.selected_or_first_available_variant.id %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
            {% endfor %}
          </select>
        </div>
        
        <script type="text/javascript">
          var selectCallback = function(variant, selector) {
            if (variant && variant.available == true) {
              
              // selected a valid variant
              $('#productinfo #detail #purchase').removeClass('disabled').removeAttr('disabled'); // remove unavailable class from add-to-cart button, and re-enable button
              var newHtml = Shopify.formatMoney(variant.price, {{ shop.money | json }});
              if(variant.compare_at_price > variant.price) {
                newHtml += '<div class="was-price">' + {{ 'products.general.was' | t | json }} + ' ' + Shopify.formatMoney(variant.compare_at_price, "{{shop.money}}") + '</div>';
              }
              $('#price-field').html(newHtml);  // update price field
            } else {
              // variant doesn't exist
              $('#productinfo #detail #purchase').addClass('disabled').attr('disabled', 'disabled'); // set add-to-cart button to unavailable class and disable button
              var message = variant ? {{ 'products.variant.out_of_stock' | t | json }} : {{ 'products.variant.non_existent' | t | json }};
              $('#price-field').text(message); // update price-field message
            }

            //Shopify variant linking
            if (variant && variant.featured_image) {
              $('#productinfo .gallery a.thumb[href^="' +Shopify.Image.getSizedImageUrl(variant.featured_image.src, 'master').split('?')[0] + '"]').first().click();
            }
          };
          
          //Set up product inputs
          $(function() {
            new Shopify.OptionSelectors("product-select", { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });
            {% if settings.prod_enable_linked_options and product.options.size > 1 %}
            Shopify.linkOptionSelectors({{ product | json }});
             {% endif %}
              
             //Hide original option label if we now have multiple options
             if($('.selector-wrapper .single-option-selector').length != 1) {
               $('#product-select').siblings('label[for="product-select"]').hide();
             }
              
              //Style any added select dropdowns
              $.selectReplace();
             });
        </script>
        {% endif %}
        
        {% comment %} If you are using Shopify's Line Item Properties, add them in here! {% endcomment %}
        
      </div>
      

      <div class="addbuttoncont">
        <input type="submit" name="add" id="purchase" class="button large plus" value="{{ 'products.general.add_to_cart' | t }}" />
      </div>
      
      <script>
        Shopify.money_format = {{ shop.money_format | json }};
        
        {% unless settings.prod_disable_ajax %}
        //Override for default Shopify function
        Shopify.onItemAdded = function(line_item) {
          //Make buttons usable again
          $('form input[type="submit"]').attr('disabled', false).removeClass('disabled');
          //Adding to cart successful, update cart
          Shopify.getCart();
          //Show 'item added'
          $('#purchase').siblings('.added').remove();
          $('<div>').addClass('added').html('<span class="yay">{{ 'products.general.added_thanks' | t  }}</span><a class="basket" href="/cart">{{ 'products.general.added_cart_link' | t  }} &rarr;</a>')
          .insertBefore($('#purchase')).fadeIn(200).delay(5000).fadeOut(500, function(){ 
            $(this).remove();
          });
          return false;
        }
        
        //Override for default Shopify function
        Shopify.onError = function(XMLHttpRequest, textStatus) {
          //Make buttons usable again
          $('form input[type="submit"]').attr('disabled', false).removeClass('disabled');
          //Display error message
          var errmsg;
          var data = eval('(' + XMLHttpRequest.responseText + ')');
          if (!!data.message) {
            errmsg = data.message + '<br />' + data.description;
          } else {
            errmsg = Shopify.fullMessagesFromErrors(data).join('; ');
          }
          $('#purchase').siblings('.added').remove();
          $('<div>').addClass('added').addClass('error').html('<span>'+errmsg+'</span>')
          .insertBefore($('#purchase')).fadeIn(200).delay(5000).fadeOut(500, function(){ 
            $(this).remove();
          });
        };
         
         //Override for default Shopify function
         Shopify.onCartUpdate = function(cart) {
           //Update elements on screen that show cart info
           $('#headercartvals').html('(' + cart.item_count + ') ' + Shopify.formatMoney(cart.total_price));
         }
         
         //Define the function that adds to the cart
         function addToCart(e) {
           if (typeof e !== 'undefined') e.preventDefault();
           Shopify.addItemFromForm($(this).closest('form').attr('id'));
         }
         
         $(function(){
           //Action for clicking 'buy'
           $('#purchase').bind('click', addToCart);
         });
         {% endunless %}
      </script>
    </form>
    {% else %}
    <h3>{{ 'products.general.product_unavailable' | t }}</h3>
    {% endif %}
    
    {% unless settings.prod_desc_under %}
    <div class="description contentsection" itemprop="description">{% include 'process-html' with product.description %}</div>
    {% endunless %}
    
    {% if settings.prod_show_type %}
    {% comment %}
    Do we have a collection that has the same name as our product type?
    {% endcomment %}
    {% assign product_type_handle = product.type | handle %}
    {% if collections[product_type_handle].handle == product_type_handle %}
    {% assign type_url = collections[product_type_handle].url %}
    {% else %}
    {% assign type_url = product.type | url_for_type  %}
    {% endif %}
    {% assign type = product.type | link_to: type_url %}
    <div class="contentsection">{{ 'products.general.type_html' | t: type: type }}</div>
    {% endif %}
    
    {% if settings.show_social_product %}
    <div class="social contentsection">
      <span class="label">{{ 'products.general.share' | t }}</span>
      {% include 'social-sharing' %}
    </div>
    {% endif %}
    
    {% comment %} List out product tags - don't show special 'related' tags {% endcomment %}
    {% assign tagsHTML = '' %}
    {% assign mostRecentTagHTML = '' %}
    {% for tag in product.tags %}
    {% assign firstbit = tag | split: '-' | first %}
    {% unless firstbit == 'related' %}
    {% capture mostRecentTagHTML %}<a href="/collections/all/{{ tag | handleize }}">{{ tag }},</a> {% endcapture %}
    {% capture tagsHTML %}{{ tagsHTML }}{{ mostRecentTagHTML }}{% endcapture %}
    {% endunless %}
    {% endfor %}
    
    {% if tagsHTML contains 'a' %}
    {% assign mostRecentTagWithoutCommaHTML = mostRecentTagHTML | replace: ',','' %}
    <div class="tags contentsection">
      {{ 'products.general.tags' | t }} {{ tagsHTML | replace: mostRecentTagHTML, mostRecentTagWithoutCommaHTML }}
    </div>
    {% endif %}
    
    {% if collection %}
    <div class="paging simpletext">
      {% if collection.previous_product %}
      <span class="prevwrap"><a class="prev" href="{{ collection.previous_product }}">&#8249;</a> <a class="text" href="{{ collection.previous_product }}">{{ 'products.general.previous' | t }}</a></span>
      {% endif %}
      {% if collection.next_product %}
      <span class="nextwrap"><a class="text" href="{{ collection.next_product }}">{{ 'products.general.next' | t }}</a> <a class="next" href="{{ collection.next_product }}">&#8250;</a></span>
      {% endif %}
    </div>
    {% endif %}
  </div><!-- #detail -->
  
  {% if settings.prod_desc_under %}
  <div class="description sixteen columns" itemprop="description">{% include 'process-html' with product.description %}</div>
  {% endif %}
</div>

{% include 'product-page-related' with product %}


<script>
  // (c) Copyright 2011 Caroline Schnapp. All Rights Reserved. Contact: mllegeorgesand@gmail.com
  // See http://wiki.shopify.com/Linked_Options
  var Shopify = Shopify || {};
  
  Shopify.optionsMap = {};
  
  Shopify.updateOptionsInSelector = function(selectorIndex) {
    
    switch (selectorIndex) {
      case 0:
        var key = 'root';
        var selector = jQuery('.single-option-selector:eq(0)');
        break;
      case 1:
        var key = jQuery('.single-option-selector:eq(0)').val();
        var selector = jQuery('.single-option-selector:eq(1)');
        break;
      case 2:
        var key = jQuery('.single-option-selector:eq(0)').val();
        key += ' / ' + jQuery('.single-option-selector:eq(1)').val();
        var selector = jQuery('.single-option-selector:eq(2)');
    }
    
    var initialValue = selector.val();
    selector.empty();
    var availableOptions = Shopify.optionsMap[key];
    if(typeof(availableOptions) != 'undefined') {
      for (var i=0; i<availableOptions.length; i++) {
        var option = availableOptions[i];
        var newOption = jQuery('<option></option>').val(option).html(option);
        selector.append(newOption);
      }
      if (jQuery.inArray(initialValue, availableOptions) !== -1) {
        selector.val(initialValue);
      }
      selector.trigger('change');
    }
  };
  
  Shopify.linkOptionSelectors = function(product) {
    // Building our mapping object.
    for (var i=0; i<product.variants.length; i++) {
      var variant = product.variants[i];
      if (variant.available) {
        // Gathering values for the 1st drop-down.
        Shopify.optionsMap['root'] = Shopify.optionsMap['root'] || [];
        Shopify.optionsMap['root'].push(variant.option1);
        Shopify.optionsMap['root'] = Shopify.uniq(Shopify.optionsMap['root']);
        // Gathering values for the 2nd drop-down.
        if (product.options.length > 1) {
          var key = variant.option1;
          Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
          Shopify.optionsMap[key].push(variant.option2);
          Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
        }
        // Gathering values for the 3rd drop-down.
        if (product.options.length === 3) {
          var key = variant.option1 + ' / ' + variant.option2;
          Shopify.optionsMap[key] = Shopify.optionsMap[key] || [];
          Shopify.optionsMap[key].push(variant.option3);
          Shopify.optionsMap[key] = Shopify.uniq(Shopify.optionsMap[key]);
        }
      }
    }
    // Update options right away.
    Shopify.updateOptionsInSelector(0);
    if (product.options.length > 1) Shopify.updateOptionsInSelector(1);
    if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
    // When there is an update in the first dropdown.
    jQuery(".single-option-selector:eq(0)").change(function() {
      Shopify.updateOptionsInSelector(1);
      if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
      return true;
    });
    // When there is an update in the second dropdown.
    jQuery(".single-option-selector:eq(1)").change(function() {
      if (product.options.length === 3) Shopify.updateOptionsInSelector(2);
      return true;
    });
    
  };
</script>
